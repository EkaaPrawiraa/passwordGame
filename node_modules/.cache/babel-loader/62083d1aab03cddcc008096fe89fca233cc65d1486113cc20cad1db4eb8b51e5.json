{"ast":null,"code":"var _jsxFileName = \"/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Rule from '../component/RuleUI';\nimport passwordRules from '../rules';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BasicTextFields() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [rulesStatus, setRulesStatus] = useState(Array(20).fill(false)); // Track which rules have passed\n  const X = 10;\n  const [open, setOpen] = useState(false);\n  const [inputLetters, setInputLetters] = useState('');\n  const [forbiddenLetters, setForbiddenLetters] = useState(['a', 'e', 'i', 'o', 'u']);\n  const handleSearch = e => {\n    const inputValue = e.target.value;\n    if (inputValue.toLowerCase().includes('cheat')) {\n      setSearchTerm(passwordRules.cheatPassword());\n    } else {\n      setSearchTerm(inputValue);\n    }\n  };\n  const checkRules = words => {\n    const newRulesStatus = [...rulesStatus];\n    let allRulesPassed = true;\n    const rules = [{\n      check: passwordRules.rule1,\n      text: \"Your password must be at least 5 characters.\"\n    }, {\n      check: passwordRules.rule2,\n      text: \"Your password must include a number.\"\n    }, {\n      check: passwordRules.rule3,\n      text: \"Your password must include an uppercase letter.\"\n    }, {\n      check: passwordRules.rule4,\n      text: \"Your password must include a non-alphanumeric character.\"\n    }, {\n      check: passwordRules.rule5,\n      text: `Sum of digits must equal ${X}`,\n      params: [X]\n    }, {\n      check: passwordRules.rule6,\n      text: \"Your password must include a month name.\"\n    }, {\n      check: passwordRules.rule7,\n      text: \"Your password must include a Roman numeral.\"\n    }, {\n      check: passwordRules.rule8,\n      text: \"Your password must include a country name.\",\n      params: [passwordRules.countries]\n    }, {\n      check: passwordRules.rule9,\n      text: `Product of Roman numerals must equal ${X}`,\n      params: [X]\n    }, {\n      check: () => true,\n      text: \"Password must satisfy rule 10\"\n    }, {\n      check: () => true,\n      text: \"Password must satisfy rule 11\"\n    }, {\n      check: passwordRules.rule12,\n      text: \"Your password must include the captcha.\",\n      params: [passwordRules.captchas[0]]\n    }, {\n      check: passwordRules.rule13,\n      text: \"Your password must include a leap year.\"\n    }, {\n      check: () => true,\n      text: \"Password must satisfy rule 14\"\n    }, {\n      check: passwordRules.rule15,\n      text: \"Your password must not contain forbidden letters.\",\n      params: [forbiddenLetters]\n    }, {\n      check: passwordRules.rule16,\n      text: \"Your password must include IRK-related phrases.\"\n    }, {\n      check: passwordRules.rule17,\n      text: `Percentage of digits must be at least 20%`,\n      params: [20]\n    }, {\n      check: passwordRules.rule18,\n      text: \"Your password must include the length of the text.\"\n    }, {\n      check: passwordRules.rule19,\n      text: \"Your password's length must be a prime number.\"\n    }, {\n      check: passwordRules.containsCurrentTime,\n      text: \"Your password must include the current time.\",\n      params: [new Date()]\n    }];\n    for (let i = 0; i < rules.length; i++) {\n      const {\n        check,\n        text,\n        params = []\n      } = rules[i];\n      if (allRulesPassed) {\n        if (check(words, ...params)) {\n          console.log(`Rule ${i + 1} passed: ${text}`);\n          newRulesStatus[i] = true;\n        } else {\n          console.log(`Rule ${i + 1} failed: ${text}`);\n          newRulesStatus[i] = false;\n          allRulesPassed = false;\n        }\n      }\n    }\n    setRulesStatus(newRulesStatus);\n  };\n  useEffect(() => {\n    checkRules(searchTerm);\n    console.log(searchTerm);\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      '& > :not(style)': {\n        m: 1,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      label: \"PASSWORDS\",\n      variant: \"standard\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), rulesStatus.map((passed, index) => /*#__PURE__*/_jsxDEV(Rule, {\n      index: index + 1,\n      text: `Rule ${index + 1}`,\n      passed: passed\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicTextFields, \"KWrRFUAq+/lpn8jL9Rf3h5dFfKU=\");\n_c = BasicTextFields;\nvar _c;\n$RefreshReg$(_c, \"BasicTextFields\");","map":{"version":3,"names":["React","useEffect","useState","Box","TextField","Rule","passwordRules","jsxDEV","_jsxDEV","BasicTextFields","_s","searchTerm","setSearchTerm","rulesStatus","setRulesStatus","Array","fill","X","open","setOpen","inputLetters","setInputLetters","forbiddenLetters","setForbiddenLetters","handleSearch","e","inputValue","target","value","toLowerCase","includes","cheatPassword","checkRules","words","newRulesStatus","allRulesPassed","rules","check","rule1","text","rule2","rule3","rule4","rule5","params","rule6","rule7","rule8","countries","rule9","rule12","captchas","rule13","rule15","rule16","rule17","rule18","rule19","containsCurrentTime","Date","i","length","console","log","component","sx","m","width","noValidate","autoComplete","children","id","label","variant","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","passed","index","_c","$RefreshReg$"],"sources":["/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Rule from '../component/RuleUI';\n\nimport passwordRules from '../rules';\n\nexport default function BasicTextFields() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [rulesStatus, setRulesStatus] = useState(Array(20).fill(false)); // Track which rules have passed\n    const X = 10;\n    const [open, setOpen] = useState(false);\n    const [inputLetters, setInputLetters] = useState('');\n    const [forbiddenLetters, setForbiddenLetters] = useState(['a', 'e', 'i', 'o', 'u']);\n\n    const handleSearch = (e) => {\n        const inputValue = e.target.value;\n        if (inputValue.toLowerCase().includes('cheat')) {\n            setSearchTerm(passwordRules.cheatPassword());\n        } else {\n            setSearchTerm(inputValue);\n        }\n    };\n\n    const checkRules = (words) => {\n        const newRulesStatus = [...rulesStatus];\n        let allRulesPassed = true;\n\n        const rules = [\n            { check: passwordRules.rule1, text: \"Your password must be at least 5 characters.\" },\n            { check: passwordRules.rule2, text: \"Your password must include a number.\" },\n            { check: passwordRules.rule3, text: \"Your password must include an uppercase letter.\" },\n            { check: passwordRules.rule4, text: \"Your password must include a non-alphanumeric character.\" },\n            { check: passwordRules.rule5, text: `Sum of digits must equal ${X}`, params: [X] },\n            { check: passwordRules.rule6, text: \"Your password must include a month name.\" },\n            { check: passwordRules.rule7, text: \"Your password must include a Roman numeral.\" },\n            { check: passwordRules.rule8, text: \"Your password must include a country name.\", params: [passwordRules.countries] },\n            { check: passwordRules.rule9, text: `Product of Roman numerals must equal ${X}`, params: [X] },\n            { check: () => true, text: \"Password must satisfy rule 10\" },\n            { check: () => true, text: \"Password must satisfy rule 11\" },\n            { check: passwordRules.rule12, text: \"Your password must include the captcha.\", params: [passwordRules.captchas[0]] },\n            { check: passwordRules.rule13, text: \"Your password must include a leap year.\" },\n            { check: () => true, text: \"Password must satisfy rule 14\" },\n            { check: passwordRules.rule15, text: \"Your password must not contain forbidden letters.\", params: [forbiddenLetters] },\n            { check: passwordRules.rule16, text: \"Your password must include IRK-related phrases.\" },\n            { check: passwordRules.rule17, text: `Percentage of digits must be at least 20%`, params: [20] },\n            { check: passwordRules.rule18, text: \"Your password must include the length of the text.\" },\n            { check: passwordRules.rule19, text: \"Your password's length must be a prime number.\" },\n            { check: passwordRules.containsCurrentTime, text: \"Your password must include the current time.\", params: [new Date()] },\n        ];\n\n        for (let i = 0; i < rules.length; i++) {\n            const { check, text, params = [] } = rules[i];\n            if (allRulesPassed) {\n                if (check(words, ...params)) {\n                    console.log(`Rule ${i + 1} passed: ${text}`);\n                    newRulesStatus[i] = true;\n                } else {\n                    console.log(`Rule ${i + 1} failed: ${text}`);\n                    newRulesStatus[i] = false;\n                    allRulesPassed = false;\n                }\n            }\n        }\n\n        setRulesStatus(newRulesStatus);\n    };\n\n    useEffect(() => {\n        checkRules(searchTerm);\n        console.log(searchTerm);\n    }, [searchTerm]);\n\n    return (\n        <Box\n            component=\"form\"\n            sx={{\n                '& > :not(style)': { m: 1, width: '25ch' },\n            }}\n            noValidate\n            autoComplete=\"off\"\n        >\n            <TextField id=\"standard-basic\" label=\"PASSWORDS\" variant=\"standard\" value={searchTerm} onChange={handleSearch} />\n            {rulesStatus.map((passed, index) => (\n                <Rule key={index} index={index + 1} text={`Rule ${index + 1}`} passed={passed} />\n            ))}\n        </Box>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}