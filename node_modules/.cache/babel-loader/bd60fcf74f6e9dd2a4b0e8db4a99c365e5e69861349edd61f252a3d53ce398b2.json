{"ast":null,"code":"var _jsxFileName = \"/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport passwordRules from '../rules';\nimport Rule from '../component/RuleUI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BasicTextFields() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [rulesChecker, setRulesChecker] = useState(Array(20).fill(0));\n  const X = 10;\n  const [newRulesComponents, setNewRulesComponents] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [inputLetters, setInputLetters] = useState('');\n  const [forbiddenLetters, setForbiddenLetters] = useState(['a', 'e', 'i', 'o', 'u']);\n  const handleSearch = e => {\n    const inputValue = e.target.value;\n    if (inputValue.toLowerCase().includes('cheat')) {\n      setSearchTerm(passwordRules.cheatPassword());\n    } else {\n      setSearchTerm(inputValue);\n    }\n  };\n  const checkRules = words => {\n    const updatedRulesComponents = [];\n    let allRulesPassed = true;\n\n    // Rule 1\n    if (passwordRules.rule1(words)) {\n      console.log('Rule 1 passed: Length greater than 5');\n      rulesChecker[0] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 1,\n        text: \"Your password must be at least 5 characters.\",\n        passed: true\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 41\n      }, this));\n    } else {\n      console.log('Rule 1 failed: Length not greater than 5');\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 1,\n        text: \"Your password must be at least 5 characters.\",\n        passed: false\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 41\n      }, this));\n      allRulesPassed = false;\n    }\n\n    // Rule 2\n    if (allRulesPassed && passwordRules.rule2(words)) {\n      console.log('Rule 2 passed: Contains at least one digit');\n      rulesChecker[1] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 2,\n        text: \"Your password must include a number.\",\n        passed: true\n      }, 2, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 2 failed: Does not contain any digit');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 2,\n          text: \"Your password must include a number.\",\n          passed: false\n        }, 2, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 3\n    if (allRulesPassed && passwordRules.rule3(words)) {\n      console.log('Rule 3 passed: Contains at least one uppercase letter');\n      rulesChecker[2] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 3,\n        text: \"Your password must include an uppercase letter.\",\n        passed: true\n      }, 3, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 3 failed: Does not contain any uppercase letter');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 3,\n          text: \"Your password must include an uppercase letter.\",\n          passed: false\n        }, 3, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 4\n    if (allRulesPassed && passwordRules.rule4(words)) {\n      console.log('Rule 4 passed: Contains non-alphanumeric characters');\n      rulesChecker[3] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 4,\n        text: \"Your password must include a non-alphanumeric character.\",\n        passed: true\n      }, 4, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 4 failed: Does not contain non-alphanumeric characters');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 4,\n          text: \"Your password must include a non-alphanumeric character.\",\n          passed: false\n        }, 4, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 5\n    if (allRulesPassed && passwordRules.rule5(words, X)) {\n      console.log(`Rule 5 passed: Sum of digits equals ${X}`);\n      rulesChecker[4] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 5,\n        text: `Sum of digits must equal ${X}`,\n        passed: true\n      }, 5, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log(`Rule 5 failed: Sum of digits does not equal ${X}`);\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 5,\n          text: `Sum of digits must equal ${X}`,\n          passed: false\n        }, 5, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 6\n    if (allRulesPassed && passwordRules.rule6(words)) {\n      console.log('Rule 6 passed: Contains month names');\n      rulesChecker[5] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 6,\n        text: \"Your password must include a month name.\",\n        passed: true\n      }, 6, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 6 failed: Does not contain month names');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 6,\n          text: \"Your password must include a month name.\",\n          passed: false\n        }, 6, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 7\n    if (allRulesPassed && passwordRules.rule7(words)) {\n      console.log('Rule 7 passed: Contains Roman numerals');\n      rulesChecker[6] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 7,\n        text: \"Your password must include a Roman numeral.\",\n        passed: true\n      }, 7, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 7 failed: Does not contain Roman numerals');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 7,\n          text: \"Your password must include a Roman numeral.\",\n          passed: false\n        }, 7, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 8\n    if (allRulesPassed && passwordRules.rule8(words, passwordRules.countries)) {\n      console.log('Rule 8 passed: Contains country names');\n      rulesChecker[7] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 8,\n        text: \"Your password must include a country name.\",\n        passed: true\n      }, 8, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 8 failed: Does not contain country names');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 8,\n          text: \"Your password must include a country name.\",\n          passed: false\n        }, 8, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 9\n    if (allRulesPassed && passwordRules.rule9(words, X)) {\n      console.log(`Rule 9 passed: Product of Roman numerals equals ${X}`);\n      rulesChecker[8] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 9,\n        text: `Product of Roman numerals must equal ${X}`,\n        passed: true\n      }, 9, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log(`Rule 9 failed: Product of Roman numerals does not equal ${X}`);\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 9,\n          text: `Product of Roman numerals must equal ${X}`,\n          passed: false\n        }, 9, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 10\n    if (allRulesPassed) {\n      const X10 = 10000;\n      rulesChecker[9] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 10,\n        text: `Password must satisfy rule 10`,\n        passed: true\n      }, 10, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 41\n      }, this));\n    }\n\n    // Rule 11\n    if (allRulesPassed) {\n      rulesChecker[10] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 11,\n        text: \"Password must satisfy rule 11\",\n        passed: true\n      }, 11, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }, this));\n    }\n\n    // Rule 12\n    if (allRulesPassed && passwordRules.rule12(words, passwordRules.captchas[0])) {\n      console.log('Rule 12 passed: Contains captcha');\n      rulesChecker[11] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 12,\n        text: \"Your password must include the captcha.\",\n        passed: true\n      }, 12, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 12 failed: Does not contain captcha');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 12,\n          text: \"Your password must include the captcha.\",\n          passed: false\n        }, 12, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 13\n    if (allRulesPassed && passwordRules.rule13(words)) {\n      console.log('Rule 13 passed: Contains leap year');\n      rulesChecker[12] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 13,\n        text: \"Your password must include a leap year.\",\n        passed: true\n      }, 13, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 13 failed: Does not contain leap year');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 13,\n          text: \"Your password must include a leap year.\",\n          passed: false\n        }, 13, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 14\n    if (allRulesPassed) {\n      rulesChecker[13] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 14,\n        text: \"Password must satisfy rule 14\",\n        passed: true\n      }, 14, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 41\n      }, this));\n    }\n\n    // Rule 15\n    if (allRulesPassed && passwordRules.rule15(words, forbiddenLetters)) {\n      console.log('Rule 15 passed: Does not contain forbidden letters');\n      rulesChecker[14] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 15,\n        text: \"Your password must not contain forbidden letters.\",\n        passed: true\n      }, 15, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 15 failed: Contains forbidden letters');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 15,\n          text: \"Your password must not contain forbidden letters.\",\n          passed: false\n        }, 15, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 16\n    if (allRulesPassed && passwordRules.rule16(words)) {\n      console.log('Rule 16 passed: Contains IRK-related phrases');\n      rulesChecker[15] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 16,\n        text: \"Your password must include IRK-related phrases.\",\n        passed: true\n      }, 16, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 16 failed: Does not contain IRK-related phrases');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 16,\n          text: \"Your password must include IRK-related phrases.\",\n          passed: false\n        }, 16, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 17\n    if (allRulesPassed && passwordRules.rule17(words, 20)) {\n      console.log(`Rule 17 passed: Percentage of digits is at least 20%`);\n      rulesChecker[16] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 17,\n        text: `Percentage of digits must be at least 20%`,\n        passed: true\n      }, 17, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log(`Rule 17 failed: Percentage of digits is less than 20%`);\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 17,\n          text: `Percentage of digits must be at least 20%`,\n          passed: false\n        }, 17, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 18\n    if (allRulesPassed && passwordRules.rule18(words)) {\n      console.log('Rule 18 passed: Contains length of text');\n      rulesChecker[17] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 18,\n        text: \"Your password must include the length of the text.\",\n        passed: true\n      }, 18, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 18 failed: Does not contain length of text');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 18,\n          text: \"Your password must include the length of the text.\",\n          passed: false\n        }, 18, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 19\n    if (allRulesPassed && passwordRules.rule19(words)) {\n      console.log('Rule 19 passed: Length of text is a prime number');\n      rulesChecker[18] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 19,\n        text: \"Your password's length must be a prime number.\",\n        passed: true\n      }, 19, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Rule 19 failed: Length of text is not a prime number');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 19,\n          text: \"Your password's length must be a prime number.\",\n          passed: false\n        }, 19, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n\n    // Rule 20\n    if (allRulesPassed && passwordRules.containsCurrentTime(words, new Date())) {\n      console.log('Your password must include the current time.');\n      rulesChecker[19] = 1;\n      updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 20,\n        text: \"Your password must include the current time.\",\n        passed: true\n      }, 20, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 41\n      }, this));\n    } else {\n      if (allRulesPassed) {\n        console.log('Does not contain current time in text');\n        updatedRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 20,\n          text: \"Your password must include the current time.\",\n          passed: false\n        }, 20, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 45\n        }, this));\n      }\n      allRulesPassed = false;\n    }\n    setNewRulesComponents(updatedRulesComponents);\n    setRulesChecker([...rulesChecker]);\n  };\n  useEffect(() => {\n    checkRules(searchTerm);\n    console.log(searchTerm);\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      '& > :not(style)': {\n        m: 1,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      label: \"PASSWORDS\",\n      variant: \"standard\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 13\n    }, this), newRulesComponents]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicTextFields, \"xOA6zRvIbMv0EIbN0uzcySgjmMI=\");\n_c = BasicTextFields;\nvar _c;\n$RefreshReg$(_c, \"BasicTextFields\");","map":{"version":3,"names":["React","useEffect","useState","Box","TextField","Button","Modal","passwordRules","Rule","jsxDEV","_jsxDEV","BasicTextFields","_s","searchTerm","setSearchTerm","gameOver","setGameOver","rulesChecker","setRulesChecker","Array","fill","X","newRulesComponents","setNewRulesComponents","open","setOpen","inputLetters","setInputLetters","forbiddenLetters","setForbiddenLetters","handleSearch","e","inputValue","target","value","toLowerCase","includes","cheatPassword","checkRules","words","updatedRulesComponents","allRulesPassed","rule1","console","log","push","index","text","passed","fileName","_jsxFileName","lineNumber","columnNumber","rule2","rule3","rule4","rule5","rule6","rule7","rule8","countries","rule9","X10","rule12","captchas","rule13","rule15","rule16","rule17","rule18","rule19","containsCurrentTime","Date","component","sx","m","width","noValidate","autoComplete","children","id","label","variant","onChange","_c","$RefreshReg$"],"sources":["/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\n\nimport passwordRules from '../rules';\nimport Rule from '../component/RuleUI';\n\nexport default function BasicTextFields() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [gameOver, setGameOver] = useState(false);\n    const [rulesChecker, setRulesChecker] = useState(Array(20).fill(0));\n    const X = 10;\n    const [newRulesComponents, setNewRulesComponents] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [inputLetters, setInputLetters] = useState('');\n    const [forbiddenLetters, setForbiddenLetters] = useState(['a', 'e', 'i', 'o', 'u']);\n\n    const handleSearch = (e) => {\n        const inputValue = e.target.value;\n        if (inputValue.toLowerCase().includes('cheat')) {\n            setSearchTerm(passwordRules.cheatPassword());\n        } else {\n            setSearchTerm(inputValue);\n        }\n    };\n\n    const checkRules = (words) => {\n        const updatedRulesComponents = [];\n        let allRulesPassed = true;\n\n        // Rule 1\n        if (passwordRules.rule1(words)) {\n            console.log('Rule 1 passed: Length greater than 5');\n            rulesChecker[0] = 1;\n            updatedRulesComponents.push(<Rule key={1} index={1} text=\"Your password must be at least 5 characters.\" passed={true} />);\n        } else {\n            console.log('Rule 1 failed: Length not greater than 5');\n            updatedRulesComponents.push(<Rule key={1} index={1} text=\"Your password must be at least 5 characters.\" passed={false} />);\n            allRulesPassed = false;\n        }\n\n        // Rule 2\n        if (allRulesPassed && passwordRules.rule2(words)) {\n            console.log('Rule 2 passed: Contains at least one digit');\n            rulesChecker[1] = 1;\n            updatedRulesComponents.push(<Rule key={2} index={2} text=\"Your password must include a number.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 2 failed: Does not contain any digit');\n                updatedRulesComponents.push(<Rule key={2} index={2} text=\"Your password must include a number.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 3\n        if (allRulesPassed && passwordRules.rule3(words)) {\n            console.log('Rule 3 passed: Contains at least one uppercase letter');\n            rulesChecker[2] = 1;\n            updatedRulesComponents.push(<Rule key={3} index={3} text=\"Your password must include an uppercase letter.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 3 failed: Does not contain any uppercase letter');\n                updatedRulesComponents.push(<Rule key={3} index={3} text=\"Your password must include an uppercase letter.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 4\n        if (allRulesPassed && passwordRules.rule4(words)) {\n            console.log('Rule 4 passed: Contains non-alphanumeric characters');\n            rulesChecker[3] = 1;\n            updatedRulesComponents.push(<Rule key={4} index={4} text=\"Your password must include a non-alphanumeric character.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 4 failed: Does not contain non-alphanumeric characters');\n                updatedRulesComponents.push(<Rule key={4} index={4} text=\"Your password must include a non-alphanumeric character.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 5\n        if (allRulesPassed && passwordRules.rule5(words, X)) {\n            console.log(`Rule 5 passed: Sum of digits equals ${X}`);\n            rulesChecker[4] = 1;\n            updatedRulesComponents.push(<Rule key={5} index={5} text={`Sum of digits must equal ${X}`} passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log(`Rule 5 failed: Sum of digits does not equal ${X}`);\n                updatedRulesComponents.push(<Rule key={5} index={5} text={`Sum of digits must equal ${X}`} passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 6\n        if (allRulesPassed && passwordRules.rule6(words)) {\n            console.log('Rule 6 passed: Contains month names');\n            rulesChecker[5] = 1;\n            updatedRulesComponents.push(<Rule key={6} index={6} text=\"Your password must include a month name.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 6 failed: Does not contain month names');\n                updatedRulesComponents.push(<Rule key={6} index={6} text=\"Your password must include a month name.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 7\n        if (allRulesPassed && passwordRules.rule7(words)) {\n            console.log('Rule 7 passed: Contains Roman numerals');\n            rulesChecker[6] = 1;\n            updatedRulesComponents.push(<Rule key={7} index={7} text=\"Your password must include a Roman numeral.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 7 failed: Does not contain Roman numerals');\n                updatedRulesComponents.push(<Rule key={7} index={7} text=\"Your password must include a Roman numeral.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 8\n        if (allRulesPassed && passwordRules.rule8(words, passwordRules.countries)) {\n            console.log('Rule 8 passed: Contains country names');\n            rulesChecker[7] = 1;\n            updatedRulesComponents.push(<Rule key={8} index={8} text=\"Your password must include a country name.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 8 failed: Does not contain country names');\n                updatedRulesComponents.push(<Rule key={8} index={8} text=\"Your password must include a country name.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 9\n        if (allRulesPassed && passwordRules.rule9(words, X)) {\n            console.log(`Rule 9 passed: Product of Roman numerals equals ${X}`);\n            rulesChecker[8] = 1;\n            updatedRulesComponents.push(<Rule key={9} index={9} text={`Product of Roman numerals must equal ${X}`} passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log(`Rule 9 failed: Product of Roman numerals does not equal ${X}`);\n                updatedRulesComponents.push(<Rule key={9} index={9} text={`Product of Roman numerals must equal ${X}`} passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 10\n        if (allRulesPassed) {\n            const X10 = 10000;\n            rulesChecker[9] = 1;\n            updatedRulesComponents.push(<Rule key={10} index={10} text={`Password must satisfy rule 10`} passed={true} />);\n        }\n\n        // Rule 11\n        if (allRulesPassed) {\n            rulesChecker[10] = 1;\n            updatedRulesComponents.push(<Rule key={11} index={11} text=\"Password must satisfy rule 11\" passed={true} />);\n        }\n\n        // Rule 12\n        if (allRulesPassed && passwordRules.rule12(words, passwordRules.captchas[0])) {\n            console.log('Rule 12 passed: Contains captcha');\n            rulesChecker[11] = 1;\n            updatedRulesComponents.push(<Rule key={12} index={12} text=\"Your password must include the captcha.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 12 failed: Does not contain captcha');\n                updatedRulesComponents.push(<Rule key={12} index={12} text=\"Your password must include the captcha.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 13\n        if (allRulesPassed && passwordRules.rule13(words)) {\n            console.log('Rule 13 passed: Contains leap year');\n            rulesChecker[12] = 1;\n            updatedRulesComponents.push(<Rule key={13} index={13} text=\"Your password must include a leap year.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 13 failed: Does not contain leap year');\n                updatedRulesComponents.push(<Rule key={13} index={13} text=\"Your password must include a leap year.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 14\n        if (allRulesPassed) {\n            rulesChecker[13] = 1;\n            updatedRulesComponents.push(<Rule key={14} index={14} text=\"Password must satisfy rule 14\" passed={true} />);\n        }\n\n        // Rule 15\n        if (allRulesPassed && passwordRules.rule15(words, forbiddenLetters)) {\n            console.log('Rule 15 passed: Does not contain forbidden letters');\n            rulesChecker[14] = 1;\n            updatedRulesComponents.push(<Rule key={15} index={15} text=\"Your password must not contain forbidden letters.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 15 failed: Contains forbidden letters');\n                updatedRulesComponents.push(<Rule key={15} index={15} text=\"Your password must not contain forbidden letters.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 16\n        if (allRulesPassed && passwordRules.rule16(words)) {\n            console.log('Rule 16 passed: Contains IRK-related phrases');\n            rulesChecker[15] = 1;\n            updatedRulesComponents.push(<Rule key={16} index={16} text=\"Your password must include IRK-related phrases.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 16 failed: Does not contain IRK-related phrases');\n                updatedRulesComponents.push(<Rule key={16} index={16} text=\"Your password must include IRK-related phrases.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 17\n        if (allRulesPassed && passwordRules.rule17(words, 20)) {\n            console.log(`Rule 17 passed: Percentage of digits is at least 20%`);\n            rulesChecker[16] = 1;\n            updatedRulesComponents.push(<Rule key={17} index={17} text={`Percentage of digits must be at least 20%`} passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log(`Rule 17 failed: Percentage of digits is less than 20%`);\n                updatedRulesComponents.push(<Rule key={17} index={17} text={`Percentage of digits must be at least 20%`} passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 18\n        if (allRulesPassed && passwordRules.rule18(words)) {\n            console.log('Rule 18 passed: Contains length of text');\n            rulesChecker[17] = 1;\n            updatedRulesComponents.push(<Rule key={18} index={18} text=\"Your password must include the length of the text.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 18 failed: Does not contain length of text');\n                updatedRulesComponents.push(<Rule key={18} index={18} text=\"Your password must include the length of the text.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 19\n        if (allRulesPassed && passwordRules.rule19(words)) {\n            console.log('Rule 19 passed: Length of text is a prime number');\n            rulesChecker[18] = 1;\n            updatedRulesComponents.push(<Rule key={19} index={19} text=\"Your password's length must be a prime number.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Rule 19 failed: Length of text is not a prime number');\n                updatedRulesComponents.push(<Rule key={19} index={19} text=\"Your password's length must be a prime number.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        // Rule 20\n        if (allRulesPassed && passwordRules.containsCurrentTime(words, new Date())) {\n            console.log('Your password must include the current time.');\n            rulesChecker[19] = 1;\n            updatedRulesComponents.push(<Rule key={20} index={20} text=\"Your password must include the current time.\" passed={true} />);\n        } else {\n            if (allRulesPassed) {\n                console.log('Does not contain current time in text');\n                updatedRulesComponents.push(<Rule key={20} index={20} text=\"Your password must include the current time.\" passed={false} />);\n            }\n            allRulesPassed = false;\n        }\n\n        setNewRulesComponents(updatedRulesComponents);\n        setRulesChecker([...rulesChecker]);\n    };\n\n    useEffect(() => {\n        checkRules(searchTerm);\n        console.log(searchTerm);\n    }, [searchTerm]);\n\n    return (\n        <Box\n            component=\"form\"\n            sx={{\n                '& > :not(style)': { m: 1, width: '25ch' },\n            }}\n            noValidate\n            autoComplete=\"off\"\n        >\n            <TextField id=\"standard-basic\" label=\"PASSWORDS\" variant=\"standard\" value={searchTerm} onChange={handleSearch} />\n            {newRulesComponents}\n        </Box>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}