{"ast":null,"code":"var _jsxFileName = \"/Users/ekaaprawira/Documents/github/IRK/passwordsgame/passwordGame/src/pages/Homepage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport passwordRules from '../rules';\nimport Rule from '../component/RuleUI';\nimport Typography from '@mui/material/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TextBox() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const [rulesChecker, setRulesChecker] = useState(Array(20).fill(0));\n  const X = 10;\n  let rulesCounter = 0;\n  const [rulesComponents, setRulesComponents] = useState([]);\n  const handleSearch = e => {\n    const inputValue = e.target.value;\n    if (inputValue.toLowerCase().includes('cheat')) {\n      setSearchTerm(passwordRules.cheatPassword());\n    } else {\n      setSearchTerm(inputValue);\n    }\n  };\n  const checkRules = words => {\n    const newRulesComponents = [];\n    let allPassed = true;\n    if (true) {\n      if (passwordRules.rule1(words)) {\n        console.log('Rule 1 passed: Length greater than 5');\n        rulesChecker[0] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 1,\n          text: \"Your password must be at least 5 characters.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 1 failed: Length not greater than 5');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 1,\n          text: \"Your password must be at least 5 characters.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[0] == 1) {\n      if (passwordRules.rule2(words)) {\n        console.log('Rule 2 passed: Contains at least one digit');\n        rulesChecker[1] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 2,\n          text: \"Your password must include a number.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 2 failed: Does not contain any digit');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 2,\n          text: \"Your password must include a number.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[1] == 1) {\n      if (passwordRules.rule3(words)) {\n        console.log('Rule 3 passed: Contains at least one uppercase letter');\n        rulesChecker[2] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 3,\n          text: \"Your password must include an uppercase letter.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 3 failed: Does not contain any uppercase letter');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 3,\n          text: \"Your password must include an uppercase letter.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[2] == 1) {\n      if (passwordRules.rule4(words)) {\n        console.log('Rule 4 passed: Contains non-alphanumeric characters');\n        rulesChecker[3] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 4,\n          text: \"Your password must include a non-alphanumeric character.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 4 failed: Does not contain non-alphanumeric characters');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 4,\n          text: \"Your password must include a non-alphanumeric character.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[3] == 1) {\n      if (passwordRules.rule5(words, X)) {\n        console.log(`Rule 5 passed: Sum of digits equals ${X}`);\n        rulesChecker[4] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 5,\n          text: `Sum of digits must equal ${X}`,\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log(`Rule 5 failed: Sum of digits does not equal ${X}`);\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 5,\n          text: `Sum of digits must equal ${X}`,\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[4] == 1) {\n      if (passwordRules.rule6(words)) {\n        console.log('Rule 6 passed: Contains month names');\n        rulesChecker[5] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 6,\n          text: \"Your password must include a month name.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 6 failed: Does not contain month names');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 6,\n          text: \"Your password must include a month name.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[5] == 1) {\n      if (passwordRules.rule7(words)) {\n        console.log('Rule 7 passed: Contains Roman numerals');\n        rulesChecker[6] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 7,\n          text: \"Your password must include a Roman numeral.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 7 failed: Does not contain Roman numerals');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 7,\n          text: \"Your password must include a Roman numeral.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[6] == 1) {\n      if (passwordRules.rule8(words, passwordRules.countries)) {\n        console.log('Rule 8 passed: Contains country names');\n        rulesChecker[7] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 8,\n          text: \"Your password must include a country name.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 8 failed: Does not contain country names');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 8,\n          text: \"Your password must include a country name.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[7] == 1) {\n      if (passwordRules.rule9(words, X)) {\n        console.log(`Rule 9 passed: Product of Roman numerals equals ${X}`);\n        rulesChecker[8] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 9,\n          text: `Product of Roman numerals must equal ${X}`,\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log(`Rule 9 failed: Product of Roman numerals does not equal ${X}`);\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 9,\n          text: `Product of Roman numerals must equal ${X}`,\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[8] == 1) {\n      rulesChecker[9] = 1;\n      if (words.includes('ðŸ”¥')) {\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 10,\n          text: `Oh no! Your password is on fire ðŸ”¥. Quick, put it out!`,\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 37\n        }, this));\n      } else {\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 10,\n          text: `Oh no! Your password is on fire ðŸ”¥. Quick, put it out!`,\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[9] == 1) {\n      rulesChecker[10] = 1;\n      newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 11,\n        text: \"Password must satisfy rule 11\",\n        passed: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 33\n      }, this));\n      //allpased\n    }\n    if (rulesChecker[10] == 1) {\n      const captcha = passwordRules.captchas[0];\n      if (passwordRules.rule12(words, captcha)) {\n        console.log('Rule 12 passed: Contains captcha');\n        rulesChecker[11] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 12,\n          text: \"Your password must include the captcha.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 12 failed: Does not contain captcha');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 12,\n          text: \"Your password must include the captcha.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[11] == 1) {\n      if (passwordRules.rule13(words)) {\n        console.log('Rule 13 passed: Contains leap year');\n        rulesChecker[12] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 13,\n          text: \"Your password must include a leap year.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 13 failed: Does not contain leap year');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 13,\n          text: \"Your password must include a leap year.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[12] == 1) {\n      rulesChecker[13] = 1;\n      newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n        index: 14,\n        text: \"Password must satisfy rule 14\",\n        passed: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 33\n      }, this));\n      //allpases\n    }\n    if (rulesChecker[13] == 1) {\n      const forbiddenLetters = ['a', 'e', 'i', 'o', 'u'];\n      if (passwordRules.rule15(words, forbiddenLetters)) {\n        console.log('Rule 15 passed: Does not contain forbidden letters');\n        rulesChecker[14] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 15,\n          text: \"Your password must not contain forbidden letters.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 15 failed: Contains forbidden letters');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 15,\n          text: \"Your password must not contain forbidden letters.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[14] == 1) {\n      if (passwordRules.rule16(words)) {\n        console.log('Rule 16 passed: Contains IRK-related phrases');\n        rulesChecker[15] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 16,\n          text: \"Your password must include IRK-related phrases.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 16 failed: Does not contain IRK-related phrases');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 16,\n          text: \"Your password must include IRK-related phrases.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[15] == 1) {\n      const X17 = 20;\n      if (passwordRules.rule17(words, X17)) {\n        console.log(`Rule 17 passed: Percentage of digits is at least ${X17}%`);\n        rulesChecker[16] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 17,\n          text: `Percentage of digits must be at least ${X17}%`,\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log(`Rule 17 failed: Percentage of digits is less than ${X17}%`);\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 17,\n          text: `Percentage of digits must be at least ${X17}%`,\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[16] == 1) {\n      if (passwordRules.rule18(words)) {\n        console.log('Rule 18 passed: Contains length of text');\n        rulesChecker[17] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 18,\n          text: \"Your password must include the length of the text.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 18 failed: Does not contain length of text');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 18,\n          text: \"Your password must include the length of the text.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[17] == 1) {\n      if (passwordRules.rule19(words)) {\n        console.log('Rule 19 passed: Length of text is a prime number');\n        rulesChecker[18] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 19,\n          text: \"Your password's length must be a prime number.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Rule 19 failed: Length of text is not a prime number');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 19,\n          text: \"Your password's length must be a prime number.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[18] == 1) {\n      const currentTime = new Date();\n      if (passwordRules.containsCurrentTime(words, currentTime)) {\n        console.log('Your password must include the current time.');\n        rulesChecker[19] = 1;\n        newRulesComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 20,\n          text: \"Your password must include the current time.\",\n          passed: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 37\n        }, this));\n      } else {\n        console.log('Does not contain current time in text');\n        newRulesComponents.unshift( /*#__PURE__*/_jsxDEV(Rule, {\n          index: 20,\n          text: \"Your password must include the current time.\",\n          passed: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 40\n        }, this));\n        allPassed = false;\n      }\n    }\n    if (rulesChecker[19] == 1 && allPassed) {\n      console.log(\"win\");\n    }\n    setRulesComponents(newRulesComponents);\n  };\n  useEffect(() => {\n    checkRules(searchTerm);\n    console.log(searchTerm);\n  }, [searchTerm]);\n  useEffect(() => {\n    if (rulesChecker[8] === 1) {\n      const intervalId = setInterval(() => {\n        setSearchTerm(passwordRules.rule10);\n      }, 5000);\n      return () => clearInterval(intervalId);\n    }\n  }, [rulesChecker, passwordRules.rule10, searchTerm]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      // justifyContent: 'center',\n      paddingTop: '45px',\n      height: '100vh',\n      '& > :not(style)': {\n        m: 1,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      component: \"img\",\n      src: \"https://neal.fun/password-game/title.svg\",\n      alt: \"Title\",\n      sx: {\n        width: '100%',\n        maxWidth: '500px',\n        marginBottom: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h9\",\n      gutterBottom: true,\n      children: \"Please choose a password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"standard-basic\",\n        variant: \"outlined\",\n        value: searchTerm,\n        onChange: handleSearch,\n        sx: {\n          borderRadius: '15px',\n          backgroundColor: '#fff',\n          '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n              borderRadius: '15px',\n              // borderWidth: '2px',\n              borderColor: 'black'\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        sx: {\n          paddingLeft: 10\n        },\n        children: searchTerm.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this), rulesComponents]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n}\n_s(TextBox, \"FxWqfp9alAAArAA7Ri0zxGji4CY=\");\n_c = TextBox;\nvar _c;\n$RefreshReg$(_c, \"TextBox\");","map":{"version":3,"names":["React","useEffect","useState","Box","TextField","passwordRules","Rule","Typography","jsxDEV","_jsxDEV","TextBox","_s","searchTerm","setSearchTerm","gameOver","setGameOver","rulesChecker","setRulesChecker","Array","fill","X","rulesCounter","rulesComponents","setRulesComponents","handleSearch","e","inputValue","target","value","toLowerCase","includes","cheatPassword","checkRules","words","newRulesComponents","allPassed","rule1","console","log","push","index","text","passed","fileName","_jsxFileName","lineNumber","columnNumber","unshift","rule2","rule3","rule4","rule5","rule6","rule7","rule8","countries","rule9","captcha","captchas","rule12","rule13","forbiddenLetters","rule15","rule16","X17","rule17","rule18","rule19","currentTime","Date","containsCurrentTime","intervalId","setInterval","rule10","clearInterval","component","sx","display","flexDirection","alignItems","paddingTop","height","m","width","noValidate","autoComplete","children","src","alt","maxWidth","marginBottom","variant","gutterBottom","id","onChange","borderRadius","backgroundColor","borderColor","paddingLeft","length","_c","$RefreshReg$"],"sources":["/Users/ekaaprawira/Documents/github/IRK/passwordsgame/passwordGame/src/pages/Homepage.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport passwordRules from '../rules';\nimport Rule from '../component/RuleUI';\nimport Typography from '@mui/material/Typography';\n\nexport default function TextBox() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [gameOver, setGameOver] = useState(false);\n    const [rulesChecker, setRulesChecker] = useState(Array(20).fill(0));\n    const X = 10;\n    let rulesCounter=0;\n    const [rulesComponents, setRulesComponents] = useState([]);\n\n    const handleSearch = (e) => {\n        const inputValue = e.target.value;\n        if (inputValue.toLowerCase().includes('cheat')) {\n            setSearchTerm(passwordRules.cheatPassword());\n        } else {\n            setSearchTerm(inputValue);\n        }\n    }\n    \n    const checkRules = (words) => {\n    const newRulesComponents = [];\n    let allPassed = true;\n    if (true) {\n        if (passwordRules.rule1(words)) {\n            console.log('Rule 1 passed: Length greater than 5');\n            rulesChecker[0] = 1;\n            newRulesComponents.push(<Rule index={1} text=\"Your password must be at least 5 characters.\" passed={true} />);\n        } else {\n            console.log('Rule 1 failed: Length not greater than 5');\n            newRulesComponents.unshift(<Rule index={1} text=\"Your password must be at least 5 characters.\" passed={false} />);\n            allPassed = false;\n            \n        }\n    }\n\n    if (rulesChecker[0] == 1) {\n        if (passwordRules.rule2(words)) {\n            console.log('Rule 2 passed: Contains at least one digit');\n            rulesChecker[1] = 1;\n            newRulesComponents.push(<Rule index={2} text=\"Your password must include a number.\" passed={true} />);\n        } else {\n            console.log('Rule 2 failed: Does not contain any digit');\n            newRulesComponents.unshift(<Rule index={2} text=\"Your password must include a number.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[1] == 1) {\n        if (passwordRules.rule3(words)) {\n            console.log('Rule 3 passed: Contains at least one uppercase letter');\n            rulesChecker[2] = 1;\n            newRulesComponents.push(<Rule index={3} text=\"Your password must include an uppercase letter.\" passed={true} />);\n        } else {\n            console.log('Rule 3 failed: Does not contain any uppercase letter');\n            newRulesComponents.unshift(<Rule index={3} text=\"Your password must include an uppercase letter.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[2] == 1) {\n        if (passwordRules.rule4(words)) {\n            console.log('Rule 4 passed: Contains non-alphanumeric characters');\n            rulesChecker[3] = 1;\n            newRulesComponents.push(<Rule index={4} text=\"Your password must include a non-alphanumeric character.\" passed={true} />);\n        } else {\n            console.log('Rule 4 failed: Does not contain non-alphanumeric characters');\n            newRulesComponents.unshift(<Rule index={4} text=\"Your password must include a non-alphanumeric character.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[3] == 1) {\n        if (passwordRules.rule5(words, X)) {\n            console.log(`Rule 5 passed: Sum of digits equals ${X}`);\n            rulesChecker[4] = 1;\n            newRulesComponents.push(<Rule index={5} text={`Sum of digits must equal ${X}`} passed={true} />);\n        } else {\n            console.log(`Rule 5 failed: Sum of digits does not equal ${X}`);\n            newRulesComponents.unshift(<Rule index={5} text={`Sum of digits must equal ${X}`} passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[4] == 1) {\n        if (passwordRules.rule6(words)) {\n            console.log('Rule 6 passed: Contains month names');\n            rulesChecker[5] = 1;\n            newRulesComponents.push(<Rule index={6} text=\"Your password must include a month name.\" passed={true} />);\n        } else {\n            console.log('Rule 6 failed: Does not contain month names');\n            newRulesComponents.unshift(<Rule index={6} text=\"Your password must include a month name.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[5] == 1) {\n        if (passwordRules.rule7(words)) {\n            console.log('Rule 7 passed: Contains Roman numerals');\n            rulesChecker[6] = 1;\n            newRulesComponents.push(<Rule index={7} text=\"Your password must include a Roman numeral.\" passed={true} />);\n        } else {\n            console.log('Rule 7 failed: Does not contain Roman numerals');\n            newRulesComponents.unshift(<Rule index={7} text=\"Your password must include a Roman numeral.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[6] == 1) {\n        if (passwordRules.rule8(words, passwordRules.countries)) {\n            console.log('Rule 8 passed: Contains country names');\n            rulesChecker[7] = 1;\n            newRulesComponents.push(<Rule index={8} text=\"Your password must include a country name.\" passed={true} />);\n        } else {\n            console.log('Rule 8 failed: Does not contain country names');\n            newRulesComponents.unshift(<Rule index={8} text=\"Your password must include a country name.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[7] == 1) {\n        if (passwordRules.rule9(words, X)) {\n            console.log(`Rule 9 passed: Product of Roman numerals equals ${X}`);\n            rulesChecker[8] = 1;\n            newRulesComponents.push(<Rule index={9} text={`Product of Roman numerals must equal ${X}`} passed={true} />);\n        } else {\n            console.log(`Rule 9 failed: Product of Roman numerals does not equal ${X}`);\n            newRulesComponents.unshift(<Rule index={9} text={`Product of Roman numerals must equal ${X}`} passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[8] == 1) {\n        rulesChecker[9] = 1;\n        if (words.includes('ðŸ”¥')){\n            newRulesComponents.push(<Rule index={10} text={`Oh no! Your password is on fire ðŸ”¥. Quick, put it out!`} passed={false} />);\n        }\n        else{\n            newRulesComponents.unshift(<Rule index={10} text={`Oh no! Your password is on fire ðŸ”¥. Quick, put it out!`} passed={true} />);\n            allPassed = false;\n        }\n    }\n    if (rulesChecker[9] == 1) {\n        rulesChecker[10] = 1;\n        newRulesComponents.push(<Rule index={11} text=\"Password must satisfy rule 11\" passed={true} />);\n        //allpased\n    }\n\n    if (rulesChecker[10] == 1) {\n        const captcha = passwordRules.captchas[0];\n        if (passwordRules.rule12(words, captcha)) {\n            console.log('Rule 12 passed: Contains captcha');\n            rulesChecker[11] = 1;\n            newRulesComponents.push(<Rule index={12} text=\"Your password must include the captcha.\" passed={true} />);\n        } else {\n            console.log('Rule 12 failed: Does not contain captcha');\n            newRulesComponents.unshift(<Rule index={12} text=\"Your password must include the captcha.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[11] == 1) {\n        if (passwordRules.rule13(words)) {\n            console.log('Rule 13 passed: Contains leap year');\n            rulesChecker[12] = 1;\n            newRulesComponents.push(<Rule index={13} text=\"Your password must include a leap year.\" passed={true} />);\n        } else {\n            console.log('Rule 13 failed: Does not contain leap year');\n            newRulesComponents.unshift(<Rule index={13} text=\"Your password must include a leap year.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[12] == 1) {\n        rulesChecker[13] = 1;\n        newRulesComponents.push(<Rule index={14} text=\"Password must satisfy rule 14\" passed={true} />);\n        //allpases\n    }\n\n    if (rulesChecker[13] == 1) {\n        const forbiddenLetters = ['a', 'e', 'i', 'o', 'u'];\n        if (passwordRules.rule15(words, forbiddenLetters)) {\n            console.log('Rule 15 passed: Does not contain forbidden letters');\n            rulesChecker[14] = 1;\n            newRulesComponents.push(<Rule index={15} text=\"Your password must not contain forbidden letters.\" passed={true} />);\n        } else {\n            console.log('Rule 15 failed: Contains forbidden letters');\n            newRulesComponents.unshift(<Rule index={15} text=\"Your password must not contain forbidden letters.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[14] == 1) {\n        if (passwordRules.rule16(words)) {\n            console.log('Rule 16 passed: Contains IRK-related phrases');\n            rulesChecker[15] = 1;\n            newRulesComponents.push(<Rule index={16} text=\"Your password must include IRK-related phrases.\" passed={true} />);\n        } else {\n            console.log('Rule 16 failed: Does not contain IRK-related phrases');\n            newRulesComponents.unshift(<Rule index={16} text=\"Your password must include IRK-related phrases.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[15] == 1) {\n        const X17 = 20;\n        if (passwordRules.rule17(words, X17)) {\n            console.log(`Rule 17 passed: Percentage of digits is at least ${X17}%`);\n            rulesChecker[16] = 1;\n            newRulesComponents.push(<Rule index={17} text={`Percentage of digits must be at least ${X17}%`} passed={true} />);\n        } else {\n            console.log(`Rule 17 failed: Percentage of digits is less than ${X17}%`);\n            newRulesComponents.unshift(<Rule index={17} text={`Percentage of digits must be at least ${X17}%`} passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[16] == 1) {\n        if (passwordRules.rule18(words)) {\n            console.log('Rule 18 passed: Contains length of text');\n            rulesChecker[17] = 1;\n            newRulesComponents.push(<Rule index={18} text=\"Your password must include the length of the text.\" passed={true} />);\n        } else {\n            console.log('Rule 18 failed: Does not contain length of text');\n            newRulesComponents.unshift(<Rule index={18} text=\"Your password must include the length of the text.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[17] == 1) {\n        if (passwordRules.rule19(words)) {\n            console.log('Rule 19 passed: Length of text is a prime number');\n            rulesChecker[18] = 1;\n            newRulesComponents.push(<Rule index={19} text=\"Your password's length must be a prime number.\" passed={true} />);\n        } else {\n            console.log('Rule 19 failed: Length of text is not a prime number');\n            newRulesComponents.unshift(<Rule index={19} text=\"Your password's length must be a prime number.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n\n    if (rulesChecker[18] == 1) {\n        const currentTime = new Date();\n        if (passwordRules.containsCurrentTime(words, currentTime)) {\n            console.log('Your password must include the current time.');\n            rulesChecker[19] = 1;\n            newRulesComponents.push(<Rule index={20} text=\"Your password must include the current time.\" passed={true} />);\n        } else {\n            console.log('Does not contain current time in text');\n            newRulesComponents.unshift(<Rule index={20} text=\"Your password must include the current time.\" passed={false} />);\n            allPassed = false;\n        }\n    }\n    if (rulesChecker[19]==1 && allPassed){\n        console.log(\"win\");\n    }\n\n    setRulesComponents(newRulesComponents);\n};\n\n    \n\n    useEffect(() => {\n        checkRules(searchTerm)\n        console.log(searchTerm)\n    }, [searchTerm])\n    useEffect(() => {\n        if (rulesChecker[8] === 1) {\n          const intervalId = setInterval(() => {\n            setSearchTerm(passwordRules.rule10); \n          }, 5000);\n          return () => clearInterval(intervalId);\n        }\n      }, [rulesChecker, passwordRules.rule10,searchTerm]);\n\n  return (\n    <Box\n    component=\"form\"\n    sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        // justifyContent: 'center',\n        paddingTop :'45px',\n        height: '100vh',\n        '& > :not(style)': { m: 1, width: '25ch' },\n    }}\n    noValidate\n    autoComplete=\"off\"\n    >\n        <Box\n                component=\"img\"\n                src=\"https://neal.fun/password-game/title.svg\"\n                alt=\"Title\"\n                sx={{\n                    width: '100%',\n                    maxWidth: '500px',\n                    marginBottom: '20px',\n                }}\n            />\n    <Typography variant=\"h9\" gutterBottom >\n                Please choose a password\n            </Typography>\n            <Box\n                sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                }}\n            >\n                <TextField \n                    id=\"standard-basic\" \n                    variant=\"outlined\" \n                    value={searchTerm} \n                    onChange={handleSearch}\n                    sx={{\n                        borderRadius: '15px',\n                        backgroundColor: '#fff',\n                        '& .MuiOutlinedInput-root': {\n                            '& fieldset': {\n                                borderRadius: '15px',\n                                // borderWidth: '2px',\n                                borderColor:'black',\n                            },\n                        },\n                    }} \n                />\n                <Typography variant=\"body1\" sx={{ paddingLeft: 10}}>\n                    {searchTerm.length}\n                </Typography>\n            </Box>\n            {rulesComponents}\n        </Box>\n    );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}