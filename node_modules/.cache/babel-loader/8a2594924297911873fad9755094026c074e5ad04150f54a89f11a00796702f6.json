{"ast":null,"code":"var _jsxFileName = \"/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport passwordRules from '../rules';\nimport Rule from '../component/RuleUI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BasicTextFields() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [rulesChecker, setRulesChecker] = useState(Array(20).fill(0));\n  const [rulesComponents, setRulesComponents] = useState([]);\n  const [forbiddenLetters, setForbiddenLetters] = useState(['a', 'e', 'i', 'o', 'u']);\n  const handleSearch = e => {\n    const inputValue = e.target.value;\n    if (inputValue.toLowerCase().includes('cheat')) {\n      setSearchTerm(passwordRules.cheatPassword());\n    } else {\n      setSearchTerm(inputValue);\n    }\n  };\n  const checkRules = words => {\n    let allRulesPassed = true;\n    const newComponents = [];\n    const rules = [{\n      check: passwordRules.rule1(words),\n      text: \"Your password must be at least 5 characters.\",\n      index: 1\n    }, {\n      check: passwordRules.rule2(words),\n      text: \"Your password must include a number.\",\n      index: 2\n    }, {\n      check: passwordRules.rule3(words),\n      text: \"Your password must include an uppercase letter.\",\n      index: 3\n    }, {\n      check: passwordRules.rule4(words),\n      text: \"Your password must include a non-alphanumeric character.\",\n      index: 4\n    }, {\n      check: passwordRules.rule5(words, 10),\n      text: \"Sum of digits must equal 10\",\n      index: 5\n    }, {\n      check: passwordRules.rule6(words),\n      text: \"Your password must include a month name.\",\n      index: 6\n    }, {\n      check: passwordRules.rule7(words),\n      text: \"Your password must include a Roman numeral.\",\n      index: 7\n    }, {\n      check: passwordRules.rule8(words, passwordRules.countries),\n      text: \"Your password must include a country name.\",\n      index: 8\n    }, {\n      check: passwordRules.rule9(words, 10),\n      text: \"Product of Roman numerals must equal 10\",\n      index: 9\n    }, {\n      check: true,\n      text: \"Password must satisfy rule 10\",\n      index: 10\n    }, {\n      check: true,\n      text: \"Password must satisfy rule 11\",\n      index: 11\n    }, {\n      check: passwordRules.rule12(words, passwordRules.captchas[0]),\n      text: \"Your password must include the captcha.\",\n      index: 12\n    }, {\n      check: passwordRules.rule13(words),\n      text: \"Your password must include a leap year.\",\n      index: 13\n    }, {\n      check: true,\n      text: \"Password must satisfy rule 14\",\n      index: 14\n    }, {\n      check: passwordRules.rule15(words, forbiddenLetters),\n      text: \"Your password must not contain forbidden letters.\",\n      index: 15\n    }, {\n      check: passwordRules.rule16(words),\n      text: \"Your password must include IRK-related phrases.\",\n      index: 16\n    }, {\n      check: passwordRules.rule17(words, 20),\n      text: \"Percentage of digits must be at least 20%\",\n      index: 17\n    }, {\n      check: passwordRules.rule18(words),\n      text: \"Your password must include the length of the text.\",\n      index: 18\n    }, {\n      check: passwordRules.rule19(words),\n      text: \"Your password's length must be a prime number.\",\n      index: 19\n    }, {\n      check: passwordRules.rule(words, new Date()),\n      text: \"Your password must include the current time.\",\n      index: 20\n    }];\n    rules.forEach(({\n      check,\n      text,\n      index\n    }) => {\n      if (check) {\n        if (!rulesChecker[index - 1]) {\n          newComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n            index: index,\n            text: text,\n            passed: true\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 40\n          }, this));\n          setRulesChecker(prev => ({\n            ...prev,\n            [index - 1]: 1\n          }));\n        }\n      } else {\n        if (!rulesChecker[index - 1]) {\n          newComponents.push( /*#__PURE__*/_jsxDEV(Rule, {\n            index: index,\n            text: text,\n            passed: false\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 40\n          }, this));\n          setRulesChecker(prev => ({\n            ...prev,\n            [index - 1]: 0\n          }));\n        }\n        allRulesPassed = false;\n      }\n    });\n    setRulesComponents(prevComponents => [...prevComponents, ...newComponents]);\n  };\n  useEffect(() => {\n    checkRules(searchTerm);\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      '& > :not(style)': {\n        m: 1,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      label: \"PASSWORDS\",\n      variant: \"standard\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), rulesComponents]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(BasicTextFields, \"lg5cxI8pNvnvkPRzKuEw2rO3x9g=\");\n_c = BasicTextFields;\nvar _c;\n$RefreshReg$(_c, \"BasicTextFields\");","map":{"version":3,"names":["React","useEffect","useState","Box","TextField","passwordRules","Rule","jsxDEV","_jsxDEV","BasicTextFields","_s","searchTerm","setSearchTerm","rulesChecker","setRulesChecker","Array","fill","rulesComponents","setRulesComponents","forbiddenLetters","setForbiddenLetters","handleSearch","e","inputValue","target","value","toLowerCase","includes","cheatPassword","checkRules","words","allRulesPassed","newComponents","rules","check","rule1","text","index","rule2","rule3","rule4","rule5","rule6","rule7","rule8","countries","rule9","rule12","captchas","rule13","rule15","rule16","rule17","rule18","rule19","rule","Date","forEach","push","passed","fileName","_jsxFileName","lineNumber","columnNumber","prev","prevComponents","component","sx","m","width","noValidate","autoComplete","children","id","label","variant","onChange","_c","$RefreshReg$"],"sources":["/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport passwordRules from '../rules';\nimport Rule from '../component/RuleUI';\n\nexport default function BasicTextFields() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [rulesChecker, setRulesChecker] = useState(Array(20).fill(0));\n    const [rulesComponents, setRulesComponents] = useState([]);\n    const [forbiddenLetters, setForbiddenLetters] = useState(['a', 'e', 'i', 'o', 'u']);\n\n    const handleSearch = (e) => {\n        const inputValue = e.target.value;\n        if (inputValue.toLowerCase().includes('cheat')) {\n            setSearchTerm(passwordRules.cheatPassword());\n        } else {\n            setSearchTerm(inputValue);\n        }\n    };\n\n    const checkRules = (words) => {\n        let allRulesPassed = true;\n        const newComponents = [];\n\n        const rules = [\n            { check: passwordRules.rule1(words), text: \"Your password must be at least 5 characters.\", index: 1 },\n            { check: passwordRules.rule2(words), text: \"Your password must include a number.\", index: 2 },\n            { check: passwordRules.rule3(words), text: \"Your password must include an uppercase letter.\", index: 3 },\n            { check: passwordRules.rule4(words), text: \"Your password must include a non-alphanumeric character.\", index: 4 },\n            { check: passwordRules.rule5(words, 10), text: \"Sum of digits must equal 10\", index: 5 },\n            { check: passwordRules.rule6(words), text: \"Your password must include a month name.\", index: 6 },\n            { check: passwordRules.rule7(words), text: \"Your password must include a Roman numeral.\", index: 7 },\n            { check: passwordRules.rule8(words, passwordRules.countries), text: \"Your password must include a country name.\", index: 8 },\n            { check: passwordRules.rule9(words, 10), text: \"Product of Roman numerals must equal 10\", index: 9 },\n            { check: true, text: \"Password must satisfy rule 10\", index: 10 },\n            { check: true, text: \"Password must satisfy rule 11\", index: 11 },\n            { check: passwordRules.rule12(words, passwordRules.captchas[0]), text: \"Your password must include the captcha.\", index: 12 },\n            { check: passwordRules.rule13(words), text: \"Your password must include a leap year.\", index: 13 },\n            { check: true, text: \"Password must satisfy rule 14\", index: 14 },\n            { check: passwordRules.rule15(words, forbiddenLetters), text: \"Your password must not contain forbidden letters.\", index: 15 },\n            { check: passwordRules.rule16(words), text: \"Your password must include IRK-related phrases.\", index: 16 },\n            { check: passwordRules.rule17(words, 20), text: \"Percentage of digits must be at least 20%\", index: 17 },\n            { check: passwordRules.rule18(words), text: \"Your password must include the length of the text.\", index: 18 },\n            { check: passwordRules.rule19(words), text: \"Your password's length must be a prime number.\", index: 19 },\n            { check: passwordRules.rule(words, new Date()), text: \"Your password must include the current time.\", index: 20 }\n        ];\n\n        rules.forEach(({ check, text, index }) => {\n            if (check) {\n                if (!rulesChecker[index - 1]) {\n                    newComponents.push(<Rule key={index} index={index} text={text} passed={true} />);\n                    setRulesChecker(prev => ({ ...prev, [index - 1]: 1 }));\n                }\n            } else {\n                if (!rulesChecker[index - 1]) {\n                    newComponents.push(<Rule key={index} index={index} text={text} passed={false} />);\n                    setRulesChecker(prev => ({ ...prev, [index - 1]: 0 }));\n                }\n                allRulesPassed = false;\n            }\n        });\n\n        setRulesComponents(prevComponents => [...prevComponents, ...newComponents]);\n    };\n\n    useEffect(() => {\n        checkRules(searchTerm);\n    }, [searchTerm]);\n\n    return (\n        <Box\n            component=\"form\"\n            sx={{\n                '& > :not(style)': { m: 1, width: '25ch' },\n            }}\n            noValidate\n            autoComplete=\"off\"\n        >\n            <TextField id=\"standard-basic\" label=\"PASSWORDS\" variant=\"standard\" value={searchTerm} onChange={handleSearch} />\n            {rulesComponents}\n        </Box>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}