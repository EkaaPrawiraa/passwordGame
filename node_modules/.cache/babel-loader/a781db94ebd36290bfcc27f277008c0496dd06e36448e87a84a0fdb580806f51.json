{"ast":null,"code":"var _jsxFileName = \"/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport passwordRules from '../rules';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BasicTextFields() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [gameOver, setGameOver] = useState(false);\n  const array = Array(20).fill(0);\n  const handleSearch = e => {\n    setSearchTerm(e.target.value);\n  };\n  const checkRules = words => {\n    if (passwordRules.rule1(words)) {\n      console.log('Rule 1 passed: Length greater than 5');\n    } else {\n      console.log('Rule 1 failed: Length not greater than 5');\n    }\n    if (passwordRules.rule2(words)) {\n      console.log('Rule 2 passed: Contains at least one digit');\n    } else {\n      console.log('Rule 2 failed: Does not contain any digit');\n    }\n    if (passwordRules.rule3(words)) {\n      console.log('Rule 3 passed: Contains at least one uppercase letter');\n    } else {\n      console.log('Rule 3 failed: Does not contain any uppercase letter');\n    }\n    if (passwordRules.rule4(words)) {\n      console.log('Rule 4 passed: Contains non-alphanumeric characters');\n    } else {\n      console.log('Rule 4 failed: Does not contain non-alphanumeric characters');\n    }\n    const X = 10;\n    if (passwordRules.rule5(words, X)) {\n      console.log(`Rule 5 passed: Sum of digits equals ${X}`);\n    } else {\n      console.log(`Rule 5 failed: Sum of digits does not equal ${X}`);\n    }\n    if (passwordRules.rule6(words)) {\n      console.log('Rule 6 passed: Contains month names');\n    } else {\n      console.log('Rule 6 failed: Does not contain month names');\n    }\n    if (passwordRules.rule7(words)) {\n      console.log('Rule 7 passed: Contains Roman numerals');\n    } else {\n      console.log('Rule 7 failed: Does not contain Roman numerals');\n    }\n    if (passwordRules.rule8(words, passwordRules.countries)) {\n      console.log('Rule 8 passed: Contains country names');\n    } else {\n      console.log('Rule 8 failed: Does not contain country names');\n    }\n    if (passwordRules.rule9(words, X)) {\n      console.log(`Rule 9 passed: Product of Roman numerals equals ${X}`);\n    } else {\n      console.log(`Rule 9 failed: Product of Roman numerals does not equal ${X}`);\n    }\n\n    // const X10 = 1000;\n    // passwordRules.rule10(words, X10);\n\n    // const X11 = 2000;\n    // if (passwordRules.rule11(words, X11)) {\n    //     console.log('Rule 11 passed: Contains 🥚 emoji');\n    // } else {\n    //     console.log('Rule 11 failed: Missing 🥚 emoji');\n    // }\n\n    const captcha = passwordRules.captchas[0];\n    if (passwordRules.rule12(words, captcha)) {\n      console.log('Rule 12 passed: Contains captcha');\n    } else {\n      console.log('Rule 12 failed: Does not contain captcha');\n    }\n    if (passwordRules.rule13(words)) {\n      console.log('Rule 13 passed: Contains leap year');\n    } else {\n      console.log('Rule 13 failed: Does not contain leap year');\n    }\n\n    // const X14 = 3000;\n    // const Y14 = 5;\n    // if (passwordRules.rule14(words, X14, Y14)) {\n    //     console.log('Rule 14 passed: Chicken 🐔 has enough worms 🐛');\n    // } else {\n    //     console.log('Rule 14 failed: Chicken 🐔 does not have enough worms 🐛');\n    // }\n\n    const forbiddenLetters = ['a', 'e', 'i', 'o', 'u'];\n    if (passwordRules.rule15(words, forbiddenLetters)) {\n      console.log('Rule 15 passed: Does not contain forbidden letters');\n    } else {\n      console.log('Rule 15 failed: Contains forbidden letters');\n    }\n    if (passwordRules.rule16(words)) {\n      console.log('Rule 16 passed: Contains IRK-related phrases');\n    } else {\n      console.log('Rule 16 failed: Does not contain IRK-related phrases');\n    }\n    const X17 = 20;\n    if (passwordRules.rule17(words, X17)) {\n      console.log(`Rule 17 passed: Percentage of digits is at least ${X17}%`);\n    } else {\n      console.log(`Rule 17 failed: Percentage of digits is less than ${X17}%`);\n    }\n    if (passwordRules.rule18(words)) {\n      console.log('Rule 18 passed: Contains length of text');\n    } else {\n      console.log('Rule 18 failed: Does not contain length of text');\n    }\n    if (passwordRules.rule19(words)) {\n      console.log('Rule 19 passed: Length of text is a prime number');\n    } else {\n      console.log('Rule 19 failed: Length of text is not a prime number');\n    }\n    const currentTime = new Date();\n    if (passwordRules.containsCurrentTime(words, currentTime)) {\n      console.log('Contains current time in text');\n    } else {\n      console.log('Does not contain current time in text');\n    }\n  };\n  useEffect(() => {\n    checkRules(searchTerm);\n    console.log(searchTerm);\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: \"form\",\n    sx: {\n      '& > :not(style)': {\n        m: 1,\n        width: '25ch'\n      }\n    },\n    noValidate: true,\n    autoComplete: \"off\",\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"standard-basic\",\n      label: \"PASSWORDS\",\n      variant: \"standard\",\n      value: searchTerm,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(BasicTextFields, \"4xM/4ghk0ba5DSMMarWlyfMtYtU=\");\n_c = BasicTextFields;\nvar _c;\n$RefreshReg$(_c, \"BasicTextFields\");","map":{"version":3,"names":["React","useEffect","useState","Box","TextField","passwordRules","jsxDEV","_jsxDEV","BasicTextFields","_s","searchTerm","setSearchTerm","gameOver","setGameOver","array","Array","fill","handleSearch","e","target","value","checkRules","words","rule1","console","log","rule2","rule3","rule4","X","rule5","rule6","rule7","rule8","countries","rule9","captcha","captchas","rule12","rule13","forbiddenLetters","rule15","rule16","X17","rule17","rule18","rule19","currentTime","Date","containsCurrentTime","component","sx","m","width","noValidate","autoComplete","children","id","label","variant","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ekaaprawira/Documents/github/IRK/passwordsgame/src/pages/Profile.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport passwordRules from '../rules';\n\nexport default function BasicTextFields() {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [gameOver, setGameOver] = useState(false);\n    const array = Array(20).fill(0);\n    const handleSearch = (e) => {\n        setSearchTerm(e.target.value)\n    }\n\n    const checkRules = (words) => {\n        if (passwordRules.rule1(words)) {\n            console.log('Rule 1 passed: Length greater than 5');\n        } else {\n            console.log('Rule 1 failed: Length not greater than 5');\n        }\n    \n        if (passwordRules.rule2(words)) {\n            console.log('Rule 2 passed: Contains at least one digit');\n        } else {\n            console.log('Rule 2 failed: Does not contain any digit');\n        }\n    \n        if (passwordRules.rule3(words)) {\n            console.log('Rule 3 passed: Contains at least one uppercase letter');\n        } else {\n            console.log('Rule 3 failed: Does not contain any uppercase letter');\n        }\n    \n        if (passwordRules.rule4(words)) {\n            console.log('Rule 4 passed: Contains non-alphanumeric characters');\n        } else {\n            console.log('Rule 4 failed: Does not contain non-alphanumeric characters');\n        }\n    \n        const X = 10;\n        if (passwordRules.rule5(words, X)) {\n            console.log(`Rule 5 passed: Sum of digits equals ${X}`);\n        } else {\n            console.log(`Rule 5 failed: Sum of digits does not equal ${X}`);\n        }\n    \n        if (passwordRules.rule6(words)) {\n            console.log('Rule 6 passed: Contains month names');\n        } else {\n            console.log('Rule 6 failed: Does not contain month names');\n        }\n    \n        if (passwordRules.rule7(words)) {\n            console.log('Rule 7 passed: Contains Roman numerals');\n        } else {\n            console.log('Rule 7 failed: Does not contain Roman numerals');\n        }\n    \n        if (passwordRules.rule8(words, passwordRules.countries)) {\n            console.log('Rule 8 passed: Contains country names');\n        } else {\n            console.log('Rule 8 failed: Does not contain country names');\n        }\n    \n        if (passwordRules.rule9(words, X)) {\n            console.log(`Rule 9 passed: Product of Roman numerals equals ${X}`);\n        } else {\n            console.log(`Rule 9 failed: Product of Roman numerals does not equal ${X}`);\n        }\n    \n        // const X10 = 1000;\n        // passwordRules.rule10(words, X10);\n    \n        // const X11 = 2000;\n        // if (passwordRules.rule11(words, X11)) {\n        //     console.log('Rule 11 passed: Contains 🥚 emoji');\n        // } else {\n        //     console.log('Rule 11 failed: Missing 🥚 emoji');\n        // }\n    \n        const captcha = passwordRules.captchas[0];\n        if (passwordRules.rule12(words, captcha)) {\n            console.log('Rule 12 passed: Contains captcha');\n        } else {\n            console.log('Rule 12 failed: Does not contain captcha');\n        }\n    \n        if (passwordRules.rule13(words)) {\n            console.log('Rule 13 passed: Contains leap year');\n        } else {\n            console.log('Rule 13 failed: Does not contain leap year');\n        }\n    \n        // const X14 = 3000;\n        // const Y14 = 5;\n        // if (passwordRules.rule14(words, X14, Y14)) {\n        //     console.log('Rule 14 passed: Chicken 🐔 has enough worms 🐛');\n        // } else {\n        //     console.log('Rule 14 failed: Chicken 🐔 does not have enough worms 🐛');\n        // }\n    \n        const forbiddenLetters = ['a', 'e', 'i', 'o', 'u'];\n        if (passwordRules.rule15(words, forbiddenLetters)) {\n            console.log('Rule 15 passed: Does not contain forbidden letters');\n        } else {\n            console.log('Rule 15 failed: Contains forbidden letters');\n        }\n    \n        if (passwordRules.rule16(words)) {\n            console.log('Rule 16 passed: Contains IRK-related phrases');\n        } else {\n            console.log('Rule 16 failed: Does not contain IRK-related phrases');\n        }\n    \n        const X17 = 20;\n        if (passwordRules.rule17(words, X17)) {\n            console.log(`Rule 17 passed: Percentage of digits is at least ${X17}%`);\n        } else {\n            console.log(`Rule 17 failed: Percentage of digits is less than ${X17}%`);\n        }\n    \n        if (passwordRules.rule18(words)) {\n            console.log('Rule 18 passed: Contains length of text');\n        } else {\n            console.log('Rule 18 failed: Does not contain length of text');\n        }\n    \n        if (passwordRules.rule19(words)) {\n            console.log('Rule 19 passed: Length of text is a prime number');\n        } else {\n            console.log('Rule 19 failed: Length of text is not a prime number');\n        }\n    \n        const currentTime = new Date();\n        if (passwordRules.containsCurrentTime(words, currentTime)) {\n            console.log('Contains current time in text');\n        } else {\n            console.log('Does not contain current time in text');\n        }\n    };\n    \n\n    useEffect(() => {\n        checkRules(searchTerm)\n        console.log(searchTerm)\n    }, [searchTerm])\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField id=\"standard-basic\" label=\"PASSWORDS\" variant=\"standard\" value={searchTerm} onChange={handleSearch} />\n    </Box>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}